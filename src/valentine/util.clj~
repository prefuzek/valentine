(ns valentine.util)

(defn multi-reduce
  "Reduces over multiple collections. f is a function of n+1 variables
  where n is the number of collections."
  [f init & cols]
  (loop [cols cols result init]
    (let [firsts (map first cols)
          rests (map rest cols)]
      (if (some nil? firsts)
        result
        (recur rests (apply f result firsts))))))

(defn coll-of-fn [obj matcher]
  (fn [obj] (reduce #(and %1 (conforms? %2 matcher)) true obj)))
  
(defn set-matches
  "Checks unordered matching bijectively for set obj. Matcher not necessarily
  a set literal, may be created by core/mset."
  [obj matcher]
  (and (set? obj)
       (= (count obj) (count matcher))
       (reduce (fn [b m] (and b (some #(conforms? % m) obj))) true matcher)
       (reduce (fn [b o] (and b (some #(conforms? o %) matcher))) true obj)))
